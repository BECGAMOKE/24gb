import os
from environs import Env


basedir = os.path.abspath(os.path.dirname(__file__))
env = Env()
env.read_env()


class Config(object):
    ENV = env.str("FLASK_ENV", default="production")
    DEBUG = ENV == "development"
    SECRET_KEY = os.environ.get('SECRET_KEY') or '57568697789789sdfsdfsf454ggfd'

    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    VK_AUTH_TOKEN = '827cf6f6827cf6f6827cf6f6b48217c04c8827c827cf6f6df7506e6cc891e20dad116e3'

    PROCESSOR_MIN_CHAR_COUNT = 200 # минимальное количество знаков в тексте для анализа. Тексты с количеством знаков, меньше этого числа, пропускаютс
    PROCESSOR_CLASSIFIER_SCORE = 0.9 # score классификатора текстов, выше которого тексты считаются медицинскими
    SHEDULE_INTERVAL =  60*24*3 # интервал в минутах, через который запускать краулер

    SERVICE_NAME = 'АСИмед' # Название приложения

    MAIL_SERVER = 'smtp.yandex.ru'
    MAIL_PORT = 465
    MAIL_USE_SSL = True
    MAIL_USE_TLS = False
    MAIL_USERNAME = 'de-blanshfor@yandex.ru'
    MAIL_PASSWORD = 'rfrnec12'
    MAIL_DEFAULT_SENDER = '<de-blanshfor@yandex.ru>'

    REGIONS = {0: 'Нет региона', 1: 'Республика Адыгея', 2: 'Республика Башкортостан', 3: 'Республика Бурятия', 4: 'Республика Алтай (Горный Алтай)',
    5: 'Республика Дагестан', 6: 'Республика Ингушетия', 7: 'Кабардино-Балкарская Республика', 8: 'Республика Калмыкия',
    9: 'Республика Карачаево-Черкессия', 10: 'Республика Карелия', 11: 'Республика Коми', 12: 'Республика Марий Эл',
    13: 'Республика Мордовия', 14: 'Республика Саха (Якутия)', 15: 'Республика Северная Осетия — Алания', 16: 'Республика Татарстан',
    17: 'Республика Тыва', 18: 'Удмуртская Республика', 19: 'Республика Хакасия', 21: 'Чувашская Республика', 22: 'Алтайский край',
    23: 'Краснодарский край', 24: 'Красноярский край', 25: 'Приморский край', 26: 'Ставропольский край', 27: 'Хабаровский край',
    28: 'Амурская область', 29: 'Архангельская область', 30: 'Астраханская область', 31: 'Белгородская область', 32: 'Брянская область',
    33: 'Владимирская область', 34: 'Волгоградская область', 35: 'Вологодская область', 36: 'Воронежская область',
    37: 'Ивановская область', 38: 'Иркутская область', 39: 'Калининградская область', 40: 'Калужская область',
    41: 'Камчатский край', 42: 'Кемеровская область', 43: 'Кировская область', 44: 'Костромская область',
    45: 'Курганская область', 46: 'Курская область', 47: 'Ленинградская область', 48: 'Липецкая область', 49: 'Магаданская область',
    50: 'Московская область', 51: 'Мурманская область', 52: 'Нижегородская область', 53: 'Новгородская область',
    54: 'Новосибирская область', 55: 'Омская область', 56: 'Оренбургская область', 57: 'Орловская область',
    58: 'Пензенская область', 59: 'Пермский край', 60: 'Псковская область', 61: 'Ростовская область', 62: 'Рязанская область',
    63: 'Самарская область', 64: 'Саратовская область', 65: 'Сахалинская область', 66: 'Свердловская область',
    67: 'Смоленская область', 68: 'Тамбовская область', 69: 'Тверская область', 70: 'Томская область', 71: 'Тульская область',
    72: 'Тюменская область', 73: 'Ульяновская область', 74: 'Челябинская область', 75: 'Забайкальский край', 76: 'Ярославская область',
    77: 'г. Москва', 78: 'г. Санкт-Петербург', 79: 'Еврейская автономная область', 82: 'Республика Крым',
    83: 'Ненецкий автономный округ', 86: 'Ханты-Мансийский автономный округ — Югра', 87: 'Чукотский автономный округ',
    89: 'Ямало-Ненецкий автономный округ', 92: 'г. Севастополь',
    94: 'Территории, находящиеся за пределами РФ и обслуживаемые Департаментом режимных объектов МВД России',
    95: 'Чеченская республика'}